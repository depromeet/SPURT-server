name: "[DEV] SPURT API CI/CD"

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create environment variable file from DEV_ENV secret
        run: |
          echo "${{ secrets.DEV_ENV }}" > .env
          echo "Environment variable file (.env) created:"

      - name: Load environment variables from .env file
        run: |
          if [ -f .env ]; then
            while IFS= read -r line; do
              if [[ $line != \#* ]] && [[ $line == *"="* ]]; then
                echo "$line" >> $GITHUB_ENV
              fi
            done < .env
            echo "Environment variables loaded from .env"
          else
            echo ".env file not found!"
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test -Dfile.encoding=UTF-8

      - name: Docker Login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_IMAGE_NAME_DEV }}:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_IMAGE_NAME_DEV }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd ${{ secrets.DEV_COMPOSE_PATH }}
            
            echo "${{ secrets.DEV_ENV }}" > .env
            cat .env || echo ".env file is missing!"
            
            docker pull ${{ secrets.DOCKER_IMAGE_NAME_DEV }}:latest
            
            if [ "$(docker ps -q -f name=spurt-api-dev)" ]; then
              echo "Stopping and removing existing container..."
              docker compose down
            else
              echo "No running container found."
            fi
            
            docker compose up -d
            
            echo "Checking container status..."
            docker ps -a | grep spurt-api-dev
